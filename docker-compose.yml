services:

###############################
#                             #
#  Network and reverse proxy  #
#                             #
###############################
 
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    working_dir: /traefik
    networks:
      - proxy
      - stack
    ports:
      - 80:80
      - "443:443"
      - "127.0.0.1:4001:8080"
    secrets:
      - AWS_CREDENTIALS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
    command: ["--configFile=/etc/traefik/traefik.yml"]
    environment:
      - AWS_SHARED_CREDENTIALS_FILE=/run/secrets/AWS_CREDENTIALS
      - AWS_REGION=${AWS_REGION}
    depends_on:
      dns-refresher:
        condition: service_healthy

  dns-refresher:
    container_name: dns-refresher
    restart: unless-stopped
    working_dir: /traefik
    build:
      context: ./traefik
      dockerfile: dockerfile/master.dockerfile
    secrets:
      - AWS_CREDENTIALS
    volumes:
      - ./traefik/update-dns.sh:/app/update-dns.sh:ro
      - ./traefik/watcher.sh:/app/watcher.sh:ro
      - ./traefik/dns.env:/app/dns.env:ro
      - ./traefik/aws.env:/app/aws.env:ro
    environment:
      - AWS_REGION=${AWS_REGION}
    networks:
      - stack

  
###############################
#                             #
#  Databases                  #
#                             #
###############################

  mariadb:
    image: mariadb:10.11
    container_name: mariadb
    restart: unless-stopped
    secrets:
      - STRONG_PASSWORD
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/STRONG_PASSWORD
      - MYSQL_PASSWORD_FILE=/run/secrets/STRONG_PASSWORD
      - MYSQL_USER=${RANDOM_USERNAME}
      - MYSQL_DATABASE=defaultdb
    ports:
      - "127.0.0.1:6002:6002"
    command: ["--port=6002"]
    volumes:
      - mariadb_db:/var/lib/mysql
    networks:
      - stack


  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6001:6001"
    command: ["redis-server", "--port", "6001", "--requirepass", "${STRONG_PASSWORD_INTERNAL}"]
    networks:
      - stack


  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${RANDOM_USERNAME_INTERNAL}
      - MONGO_INITDB_ROOT_PASSWORD=${STRONG_PASSWORD_INTERNAL}
    ports:
      - "127.0.0.1:6003:6003"
    expose:
      - "6003"
    command: ["--port", "6003"]
    volumes:
      - mongodb_db:/data/db
    networks:
      - stack
      
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${RANDOM_USERNAME_INTERNAL}
      - POSTGRES_PASSWORD=${STRONG_PASSWORD_INTERNAL}
      - POSTGRES_DB=defaultdb
    ports:
      - "127.0.0.1:6004:6004"
    command: -p 6004
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - stack

###############################
#                             #
#    Database Management      #
#                             #
###############################


  adminer:
    profiles: ["database-management"]
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "127.0.0.1:6012:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mariadb
    networks:
      - stack

  redis-commander:
    profiles: ["database-management"]
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    ports:
      - "127.0.0.1:6011:6011"
    command: ["node", "./bin/redis-commander", "--port", "6011", "--redis-host", "redis", "--redis-port", "6001", "--redis-password", "${STRONG_PASSWORD_INTERNAL}"]
    depends_on:
      - redis
    networks:
      - stack

  mongo-express:
    profiles: ["database-management"]
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
    - ME_CONFIG_MONGODB_URL=mongodb://${RANDOM_USERNAME_INTERNAL}:${STRONG_PASSWORD_INTERNAL}@mongodb:6003/
    - ME_CONFIG_BASICAUTH_USERNAME=${RANDOM_USERNAME_INTERNAL}
    - ME_CONFIG_BASICAUTH_PASSWORD=${STRONG_PASSWORD_INTERNAL}
    - ME_CONFIG_SITE_BASEURL=/
    ports:
      - "127.0.0.1:6013:8081"
    depends_on:
      - mongodb
    networks:
      - stack


###############################
#                             #
#  Network and reverse proxy  #
#                             #
###############################

networks:
  stack:
    external: true
  proxy:
    external: true

###############################
#                             #
#  Volumes                    #
#                             #
###############################

volumes:
  traefik_letsencrypt:
  redis_db:
  mariadb_db:
  mongodb_db:
  postgres_db:

###############################
#                             #
#  Secrets                    #
#                             #
###############################

secrets:
  AWS_CREDENTIALS:
    file: ./_secrets/AWS_CREDENTIALS
  STRONG_PASSWORD:
    file: ./_secrets/STRONG_PASSWORD
  STRONG_PASSWORD_SPECIALCHARACTERS:
    file: ./_secrets/STRONG_PASSWORD_SPECIALCHARACTERS
  TELEGRAM_BOT_TOKEN:
    file: ./_secrets/TELEGRAM_BOT_TOKEN
  TELEGRAM_WEBHOOK_SECRET:
    file: ./_secrets/TELEGRAM_WEBHOOK_SECRET