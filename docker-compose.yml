services:

###############################
#                             #
#  Network and Security       #
#                             #
###############################
 
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    working_dir: /traefik
    networks:
      - proxy
      - stack
    ports:
      - 80:80
      - "443:443"
      - "127.0.0.1:4001:8080"
    secrets:
      - AWS_CREDENTIALS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/plugins-local:/plugins-local
    command: ["--configFile=/etc/traefik/traefik.yml"]
    environment:
      - AWS_SHARED_CREDENTIALS_FILE=/run/secrets/AWS_CREDENTIALS
      - AWS_REGION=${AWS_REGION}
      - CROWDSEC_BOUNCER_KEY=${CROWDSEC_BOUNCER_KEY_TRAEFIK}
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --spider -q http://localhost:8080/dashboard || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      dns-refresher:
        condition: service_healthy

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    restart: unless-stopped
    volumes:
      - crowdsec_data:/var/lib/crowdsec/data
      - crowdsec_config:/etc/crowdsec
      - /var/log:/var/log:ro
      - ./crowdsec/GeoLite2-City.mmdb:/usr/share/GeoIP/GeoLite2-City.mmdb:ro
    expose:
      - "6060"
    ports:
      - "127.0.0.1:9000:8080"
    networks:
      - stack
    healthcheck:
      test: ["CMD", "cscli", "metrics"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      traefik:
        condition: service_healthy

  cs-firewall-bouncer:
    image: crowdsecurity/cs-firewall-bouncer-iptables:latest
    container_name: cs-firewall-bouncer
    restart: unless-stopped
    network_mode: host
    volumes:
      - /var/run/crowdsec:/var/run/crowdsec:ro
    environment:
      - CROWDSEC_LAPI_URL=http://127.0.0.1:9000/
      - CROWDSEC_LAPI_KEY=${CROWDSEC_BOUNCER_KEY_HOST}
    depends_on:
      - crowdsec


  dns-refresher:
    container_name: dns-refresher
    restart: unless-stopped
    working_dir: /dns-refresher
    build:
      context: ./dns-refresher
      dockerfile: dockerfile/master.dockerfile
    secrets:
      - AWS_CREDENTIALS
    volumes:
      - ./dns-refresher/update-dns.sh:/app/update-dns.sh:ro
      - ./dns-refresher/watcher.sh:/app/watcher.sh:ro
      - ./dns-refresher/dns.env:/app/dns.env:ro
    environment:
      - AWS_REGION=${AWS_REGION}
    healthcheck:
      test: ["CMD", "sh", "-c", "test $$(($$(date +%s) - $$(cat /tmp/last_successful_update 2>/dev/null || echo 0))) -lt 3600"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - stack


  
###############################
#                             #
#  Databases                  #
#                             #
###############################

  mariadb:
    image: mariadb:10.11
    container_name: mariadb
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${STRONG_PASSWORD}
      - MYSQL_PASSWORD=${STRONG_PASSWORD}
      - MYSQL_USER=${RANDOM_USERNAME}
      - MYSQL_DATABASE=defaultdb
    ports:
      - "127.0.0.1:6002:6002"
    command: ["--port=6002"]
    volumes:
      - mariadb_db:/var/lib/mysql
    networks:
      - stack


  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${STRONG_PASSWORD}
    ports:
      - "127.0.0.1:6001:6001"
    command: ["--port", "6001", "--requirepass", "${STRONG_PASSWORD}"]
    networks:
      - stack


  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${RANDOM_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${STRONG_PASSWORD}
    ports:
      - "127.0.0.1:6003:6003"
    expose:
      - "6003"
    command: ["--port", "6003"]
    volumes:
      - mongodb_db:/data/db
    networks:
      - stack
      
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${RANDOM_USERNAME}
      - POSTGRES_PASSWORD=${STRONG_PASSWORD}
      - POSTGRES_DB=defaultdb
    ports:
      - "127.0.0.1:6004:6004"
    command: -p 6004
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - stack

###############################
#                             #
#    Database Management      #
#                             #
###############################


  adminer:
    profiles: ["database-management"]
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "127.0.0.1:6012:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mariadb
    networks:
      - stack

  redis-commander:
    profiles: ["database-management"]
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    ports:
      - "127.0.0.1:6011:6011"
    command: ["sh", "-c", "node ./bin/redis-commander --port 6011 --redis-host redis --redis-port 6001 --redis-password ${STRONG_PASSWORD}"]
    depends_on:
      - redis
    networks:
      - stack

  mongo-express:
    profiles: ["database-management"]
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
    - ME_CONFIG_MONGODB_URL=mongodb://${RANDOM_USERNAME}:${STRONG_PASSWORD}@mongodb:6003/
    - ME_CONFIG_BASICAUTH_USERNAME=${RANDOM_USERNAME}
    - ME_CONFIG_BASICAUTH_PASSWORD=${STRONG_PASSWORD}
    - ME_CONFIG_SITE_BASEURL=/
    ports:
      - "127.0.0.1:6013:8081"
    depends_on:
      - mongodb
    networks:
      - stack


############################
#                          #
#  Monitoring and logging  #
#                          #
############################

# Grafana (external: 7001 -> internal: 3000)
# Prometheus (external: 7002 -> internal: 9090)


  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${RANDOM_EMAIL}
      - GF_SECURITY_ADMIN_PASSWORD=${STRONG_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "127.0.0.1:7001:3000"
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - stack
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:7002:9090"
    networks:
      - stack
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s



###############################
#                             #
#  Network and reverse proxy  #
#                             #
###############################

networks:
  stack:
    external: true
  proxy:
    external: true

###############################
#                             #
#  Volumes                    #
#                             #
###############################

volumes:
  traefik_letsencrypt:
  redis_db:
  mariadb_db:
  mongodb_db:
  postgres_db:
  crowdsec_data:
  crowdsec_config:
  grafana_data:
  prometheus_data:

###############################
#                             #
#  Secrets                    #
#                             #
###############################

secrets:
  AWS_CREDENTIALS:
    file: ./_secrets/AWS_CREDENTIALS
